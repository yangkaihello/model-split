<?php
/**
 * Created by PhpStorm.
 * User: yangkai
 * Date: 2018/11/10
 * Time: 下午4:36
 */

namespace yangkai\split;

use yangkai\split\traits\DecRule;
use yii\db\Exception;
use yii\helpers\Inflector;
use yii\helpers\StringHelper;

abstract class BaseModel extends \yii\db\ActiveRecord
{
    use DecRule;

    public $_tableNum = 32;   //分表数量最好是 2 4 8 16
    public $_createRuleField = [];    //分表规则
    public $_createRuleDate = 'Ym';

    private $_splitTable = [];    //分割的表格
    private $_existTable = [];    //已经存在的表格
    private static $_allTable = [];    //所有的数据库表作为验证
    private static $_useTable = null;    //使用中的表格

    /**
     * @throws \Exception
     */
    public function init()
    {
        if(!$this->_createRuleField)
        {
            throw new \Exception("Using automatic tables must exist: public \$_createRuleField");
        }

        if(is_array($this->_createRuleField))
        {
            for($i=0;$i<$this->_tableNum;$i++)
            {
                $splitTable = $this->setTableName($i);

                $this->_splitTable[$i] = $splitTable;
                if($this->hasTable($splitTable))
                {
                    $this->_existTable[$i] = $splitTable;
                }

            }
        }else{
            $splitTable = $this->setTableName($this->_rule());
            $this->_splitTable[$this->_rule()] = $splitTable;
            if($this->hasTable($splitTable))
            {
                $this->_existTable[$this->_rule()] = $splitTable;
            }
            $this->createTableNum();
        }



        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * tableName 作用于自动划分表格
     * @return null|string
     */
    public static function tableName()
    {
        return static::getUseTable();
    }

    /**
     * 原本的 static::tableName() 的代替品
     * @return string
     */
    public static function createTableName()
    {
        return '{{%' . Inflector::camel2id(StringHelper::basename(get_called_class()), '_') . '}}';
    }

    /**
     * 还原多操作数据库表格
     * @return $this
     */
    public function restoreModel()
    {
        static::setUseTable(null);
        return $this;
    }

    /**
     * 创建规则数据库
     * @return $this
     */
    public function createTableNum()
    {
        $dec = $this->_rule();

        if( !isset($this->_existTable[$dec]) )
        {
            $this->copyTable($this->_splitTable[$dec]);
            $this->_existTable[$dec] = $this->setTableName($dec);
        }

        static::setUseTable($this->_existTable[$dec]);

        return $this;
    }

    /**
     * 验证是否存在表格
     * @param $tableName
     * @return bool
     */
    public function hasTable($tableName)
    {
        $flag = false;
        $tableName = $this->setTrueTableName($tableName,false);

        if( empty(static::getAllTable()) )
        {
            $allTable = static::getDb()->createCommand("SHOW TABLES")->queryAll();
            foreach($allTable as $table)
            {
                static::setAllTable(array_pop($table));
            }
        }

        foreach (static::getAllTable() as $table)
        {
            if(trim($table) == trim($tableName))
            {
                $flag = true;break;
            }
        }

        return $flag;
    }

    /**
     * 获取db.tablename 全名称
     * @return string
     */
    public static function getDbCreateTableName()
    {
        return static::getDbName() . "." . static::createTableName();
    }

    /**
     * 获取dbname 全名称
     * @return string
     */
    public static function getDbName()
    {
        $arr = explode(";",explode(":",static::getDb()->dsn)[1]);
        foreach ($arr as $value)
        {
            $value = explode("=",$value);
            $param[$value[0]] = $value[1];
        }
        return $param['dbname'];
    }

    /**
     * 获取验证规则中的当前表格
     * @return int
     * @throws Exception
     */
    protected function _rule()
    {
        if(is_array($this->_createRuleField))
        {
            $dec = $this->getDec($this->_tableNum);
        }else if(is_string($this->_createRuleField)){
            $function = 'getDec' . ucfirst($this->_createRuleField);
            $dec = $this->$function();
        }else{
            throw new \Exception("Using automatic tables must exist: public \$_createRuleField not data structure");
        }

        return $dec;
    }

    protected static function setUseTable($table)
    {
        return self::$_useTable[static::getDbCreateTableName()] = $table;
    }

    protected static function getUseTable()
    {
        return self::$_useTable[static::getDbCreateTableName()] ?? static::createTableName();
    }

    protected static function setAllTable($table)
    {
        self::$_allTable[static::getDbCreateTableName()][] = $table;
    }

    protected static function getAllTable()
    {
        return self::$_allTable[static::getDbCreateTableName()] ?? [];
    }

    protected function getTrueTableName($isPercent = true)
    {
        $tableName = static::tableName();
        if(strpos(trim($tableName),'{{') == 0)
        {
            $arr = $isPercent ? ['{{','}}'] : ['{{','}}','%'];
            $tableName = str_replace($arr,null,$tableName);
        }
        return $tableName;
    }

    /**
     * 拷贝表格
     * @param $copyTableName
     * @return int
     */
    private function copyTable($copyTableName)
    {
        $tableName = static::createTableName();

        $trueTableName = $this->setTrueTableName($tableName,false);
        $copyTableName  = $this->setTrueTableName($copyTableName,false);

        $tableDesc = static::getDb()->createCommand("SHOW CREATE TABLE {$tableName}")->queryOne();
        $tableDesc = array_pop($tableDesc);

        $tableDesc = preg_replace(
            ["/{$trueTableName}/ims","/AUTO_INCREMENT=[0-9]+/ims"],
            [$copyTableName,null],
            $tableDesc,1
        );

        return static::getDb()->createCommand($tableDesc)->execute();
    }

    /**
     * @param $num int 表序号
     * @return string
     */
    private function setTableName($num)
    {
        return '{{%' . Inflector::camel2id(StringHelper::basename(get_called_class()), '_') . "_{$num}" . '}}';
    }

    /**
     * @param $tableName 表名
     * @return mixed
     */
    private function setTrueTableName($tableName,$isPercent = true)
    {
        if(strpos(trim($tableName),'{{') == 0)
        {
            $arr = $isPercent ? ['{{','}}'] : ['{{','}}','%'];
            $tableName = str_replace($arr,null,$tableName);
        }
        return $tableName;
    }

}